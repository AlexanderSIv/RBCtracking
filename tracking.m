% XYIT has been generated by follow2.m, but is reread here from file
%  to make the postprocessing independent.
% shootvel gives the first attempt velocity field
%  here we check which points can be joined together in pieces of a
%  trajectory
%The actual result is the array "tag", which labels each point according to
% the trajectory it belongs to.

%datadir='F:\Raw Data experiments\channels_donor 1\zero flow rate\60 um\3rd area\';
XYIT_all=load([datadir,'centers_IDL.dat']);
num_arr=1000000;
num_it=ceil(length(XYIT_all(:,1))/num_arr);

traj_all=[];
traj_v_all=[];
traj_num=0;
%XYIT=load([datadir,'XYIT']);

%XYIT=XYIT(1:10000,:);
%B=load('C:\Users\Vink\Documents\datav\exproc\ptv\proto.par','-ascii'); %needs to be known for radii etc.
%DR=0.3; %radius of the search ball, in units of the expected displacement

%button = questdlg('Ignore small bubbles within bigger ones?',...
%                 'Fagocitation:','Yes','No','Yes');
%if strcmp(button,'Yes')
% fagocitate; XYIT=XYIT1;
%end

%button = questdlg('Allow pattern jumps?',...
%                  'Prototype confusion:','Yes','No','Yes');
%if strcmp(button,'No')
%  pjump=0;
%else
%  pjump=1;
%end
% Ti=[];
% T=load([datadir,'frametimes.txt']);
% for i=1:length(XYIT)
%     Ti(i)=T(find(T(:,1)==XYIT(i,4)),2);%-min(XYIT(:,4));
% end;
% XYIT(:,4)=Ti;


%  for i=1:length(a)
%      if length(a)>=i+1 End=a(i+1);
%      else End=length(XYIT);
%      end
%  XYIT((a(i)+1):End,4)=XYIT((a(i)+1):End,4)+65536*i;
%  end;
% %  XYIT(:,4)=XYIT(:,4)-min(XYIT(:,4));
% %  XYIT1=XYIT;
for it=1:num_it
    if it~=num_it
        XYIT=XYIT_all((it-1)*num_arr+1:it*num_arr,:);
    else
        XYIT=XYIT_all((it-1)*num_arr+1:end,:);
    end
    
    t=(unique(XYIT(:,4)));
    % double(t);
    % double(t1);
    % double(t2);
    % XYIT(:,1)=fx-min(fx);
    % XYIT(:,2)=fy-min(fy);
    np=size(XYIT,1);
    tag=zeros(1,np);
    ntra=0;
    Rconfx=RAD;
    Rconfy=RAD;
    % XYIT(:,1)=XYIT(:,1)*cos(atan(0.033))-XYIT(:,2)*sin(atan(0.033));
    % XYIT(:,2)=XYIT(:,1)*sin(atan(0.033))+XYIT(:,2)*cos(atan(0.033));
    for i=1:np
        unt=find(~tag);
        xi=XYIT(i,1); yi=XYIT(i,2); t1=XYIT(i,4);  it=XYIT(i,3);
        %mark as beginning of a new trajectory if not already included
        if tag(i)==0 ntra=ntra+1; tag(i)=ntra; end
        % search at next t only
        nit=find(t==t1);
        if nit<length(t)
            % not the last t, search for continuation
            t2=t(nit+1);
            %      ui=0;vi=0;
            
            %       if (xi>160)&(xi<240)
            %      [ui,vi]=shootvel(xi,yi);
            
            %      end
            xn=xi;%+ui*(t2-t1)/1000;
            yn=yi;%+vi*(t2-t1)/1000;
            %   Rconf=max(sqrt((xn-xi)^2+(aspect*(yn-yi))^2)*DR,B(it,3))+20;
            % Rconf=20;
            
            %       Rconfy=max(abs(aspect*(yn-yi))*DR,B(it,3))+0;
            %  if pjump
            % j=unt(find(sqrt((XYIT(unt,1)-xn).^2+(aspect*(XYIT(unt,2)-yn)).^2)<Rconf & ...
            %      XYIT(unt,4)==t2));
            j=unt(find(abs(XYIT(unt,1)-xn)<Rconfx & abs(XYIT(unt,2)-yn)<Rconfy &...
                XYIT(unt,4)==t2));
            %       else
            %         j=unt(find(sqrt((XYIT(unt,1)-xn).^2+(XYIT(unt,2)-yn).^2)<Rconf & ...
            %                XYIT(unt,3)==it & XYIT(unt,4)==t2));
            %       end
            %found a successor
            if length(j)==1
                tag(j)=tag(i);
            end
            %found several possible successors: keep the best (best according to the
            % shoot, might not be the correct one)
            if length(j)>1
                [m,k]=min(sqrt((XYIT(j,1)-xn).^2+((XYIT(j,2)-yn)).^2));
                tag(j(k))=tag(i);
            end
            if mod(i,1000)==0
                fprintf(1,'%i ',i);
            end
            if mod(i,10000)==0 fprintf(1,'\n');end;
            
        end
    end
    %plot the result
    
    [traj,traj_v,tri]=plottraj_new(XYIT,tag,traj_num);
    traj_all=[traj_all;traj];
    traj_v_all=[traj_v_all;traj_v];
    traj_num=tri;
    
    
end
traj_num
save([datadir,'traj_v_all_IDL.dat'],'traj_v_all','-ascii');
save([datadir,'traj_all_IDL.dat'],'traj_all','-ascii');
%V_analysis;

